{"version":3,"sources":["serviceWorker.js","componenets/Card.js","componenets/CardList.js","componenets/SearchBox.js","componenets/Scroll.js","componenets/ErrorBoundry.js","componenets/CounterButton.js","componenets/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","componenets_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","componenets_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterSearch","filter","toLowerCase","includes","componenets_Header","componenets_SearchBox","componenets_Scroll","componenets_ErrorBoundry","componenets_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","intialStateSearch","intialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d74b28f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n//import { robots } from '../robots';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?10x10`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    console.log('CardList')\r\n    return (\r\n        <div>\n            {\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\n            }\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  console.log('SearchBox')\r\n    return (\r\n      <div className='pa2'>\r\n        <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search here'\r\n                onChange={searchChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => { \r\n    return (\r\n        <div style={{ overflowY: 'scroll', border:'1px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n        );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //componentDidCatch is like try/catch in JV\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState({ count: this.state.count + 1})\r\n  }\r\n  render() {\r\n    console.log('CounterButton')\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n         Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return false;\r\n    //if we make the shouldComponentUpdate false it will never\r\n    //update the Header\r\n    //the problem arises when header needs to be updated other wise no\r\n  //}\r\n  render() {\r\n    console.log('Header')\r\n    return (\r\n      <div>\r\n        <h1>Safari Migrations</h1>\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../componenets/CardList';\r\nimport SearchBox from '../componenets/SearchBox';\r\nimport Scroll from '../componenets/Scroll';\r\nimport ErrorBoundry from '../componenets/ErrorBoundry';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../componenets/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filterSearch = robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc' >\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filterSearch} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n\r\n                </div>\r\n             );\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    //const is always capital in JV\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n\r\n\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//the three word capital is a promise \r\n//we have three promises as an actions\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'; \r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SECCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n    //this is our first reducer\r\n    //we could use a if statement\r\n    //but react is more compateable with switch\r\n    //switch is much more prefered\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = intialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n//import { createLogger } from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n//logger is a middleware wich we apple to our redux app\n//const logger = createLogger();\n\nconst rootReducer = combineReducers({\r\n    searchRobots, requestRobots\r\n})\n//then we add in to our store a second parrametter which is the logger\n//when we add the thunkMiddleware it first go through this then the logger\nconst store =\n    createStore(\n        rootReducer, applyMiddleware(thunkMiddleware))\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}